
uart_own.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00002c16  00002c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bd8  00000000  00000000  00002cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000885  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000512d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000528d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008562  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000094e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009926  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c3 13 	call	0x2786	; 0x2786 <main>
      7a:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e9       	ldi	r26, 0x9B	; 155
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e9       	ldi	r24, 0x9B	; 155
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e9       	ldi	r22, 0x9B	; 155
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <LCD_init>:
 */
#include"LCD.h"


void LCD_init(void)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	ce 59       	subi	r28, 0x9E	; 158
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	LCD_DATA__DDR |=0xF0;
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 6f       	ori	r24, 0xF0	; 240
     cb4:	8c 93       	st	X, r24
	LCD_Control_DDR |=(1<<LCD_EN)|(1<<LCD_RS);
     cb6:	a4 e3       	ldi	r26, 0x34	; 52
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e4 e3       	ldi	r30, 0x34	; 52
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 6c       	ori	r24, 0xC0	; 192
     cc2:	8c 93       	st	X, r24

	LCD_Control_PORT &=~(1<<LCD_EN);
     cc4:	a5 e3       	ldi	r26, 0x35	; 53
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e3       	ldi	r30, 0x35	; 53
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8c 93       	st	X, r24
     cd2:	fe 01       	movw	r30, r28
     cd4:	e5 56       	subi	r30, 0x65	; 101
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e8       	ldi	r26, 0x80	; 128
     cde:	bf e3       	ldi	r27, 0x3F	; 63
     ce0:	80 83       	st	Z, r24
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	a2 83       	std	Z+2, r26	; 0x02
     ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	8e 01       	movw	r16, r28
     cea:	09 56       	subi	r16, 0x69	; 105
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	fe 01       	movw	r30, r28
     cf0:	e5 56       	subi	r30, 0x65	; 101
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	48 e4       	ldi	r20, 0x48	; 72
     d02:	53 e4       	ldi	r21, 0x43	; 67
     d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	a2 83       	std	Z+2, r26	; 0x02
     d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d16:	fe 01       	movw	r30, r28
     d18:	e9 56       	subi	r30, 0x69	; 105
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e8       	ldi	r20, 0x80	; 128
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d30:	88 23       	and	r24, r24
     d32:	44 f4       	brge	.+16     	; 0xd44 <LCD_init+0xb6>
		__ticks = 1;
     d34:	fe 01       	movw	r30, r28
     d36:	eb 56       	subi	r30, 0x6B	; 107
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
     d42:	64 c0       	rjmp	.+200    	; 0xe0c <LCD_init+0x17e>
	else if (__tmp > 65535)
     d44:	fe 01       	movw	r30, r28
     d46:	e9 56       	subi	r30, 0x69	; 105
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	0c f0       	brlt	.+2      	; 0xd64 <LCD_init+0xd6>
     d62:	43 c0       	rjmp	.+134    	; 0xdea <LCD_init+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d64:	fe 01       	movw	r30, r28
     d66:	e5 56       	subi	r30, 0x65	; 101
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	93 81       	ldd	r25, Z+3	; 0x03
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	8e 01       	movw	r16, r28
     d84:	0b 56       	subi	r16, 0x6B	; 107
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	f8 01       	movw	r30, r16
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	1f c0       	rjmp	.+62     	; 0xdda <LCD_init+0x14c>
     d9c:	fe 01       	movw	r30, r28
     d9e:	ed 56       	subi	r30, 0x6D	; 109
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	84 e1       	ldi	r24, 0x14	; 20
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     daa:	fe 01       	movw	r30, r28
     dac:	ed 56       	subi	r30, 0x6D	; 109
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <LCD_init+0x126>
     db8:	fe 01       	movw	r30, r28
     dba:	ed 56       	subi	r30, 0x6D	; 109
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	de 01       	movw	r26, r28
     dc4:	ab 56       	subi	r26, 0x6B	; 107
     dc6:	bf 4f       	sbci	r27, 0xFF	; 255
     dc8:	fe 01       	movw	r30, r28
     dca:	eb 56       	subi	r30, 0x6B	; 107
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	9c 93       	st	X, r25
     dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	fe 01       	movw	r30, r28
     ddc:	eb 56       	subi	r30, 0x6B	; 107
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	d1 f6       	brne	.-76     	; 0xd9c <LCD_init+0x10e>
     de8:	27 c0       	rjmp	.+78     	; 0xe38 <LCD_init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	8e 01       	movw	r16, r28
     dec:	0b 56       	subi	r16, 0x6B	; 107
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	fe 01       	movw	r30, r28
     df2:	e9 56       	subi	r30, 0x69	; 105
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	93 81       	ldd	r25, Z+3	; 0x03
     dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	f8 01       	movw	r30, r16
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	de 01       	movw	r26, r28
     e0e:	af 56       	subi	r26, 0x6F	; 111
     e10:	bf 4f       	sbci	r27, 0xFF	; 255
     e12:	fe 01       	movw	r30, r28
     e14:	eb 56       	subi	r30, 0x6B	; 107
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	8d 93       	st	X+, r24
     e1e:	9c 93       	st	X, r25
     e20:	fe 01       	movw	r30, r28
     e22:	ef 56       	subi	r30, 0x6F	; 111
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCD_init+0x19c>
     e2e:	fe 01       	movw	r30, r28
     e30:	ef 56       	subi	r30, 0x6F	; 111
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
	_delay_ms(1);

	LCD_Send_CMD(0x33);                //enable 4 bits mode
     e38:	83 e3       	ldi	r24, 0x33	; 51
     e3a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
     e3e:	fe 01       	movw	r30, r28
     e40:	e3 57       	subi	r30, 0x73	; 115
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	a8 ec       	ldi	r26, 0xC8	; 200
     e4a:	b2 e4       	ldi	r27, 0x42	; 66
     e4c:	80 83       	st	Z, r24
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	a2 83       	std	Z+2, r26	; 0x02
     e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e54:	8e 01       	movw	r16, r28
     e56:	07 57       	subi	r16, 0x77	; 119
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	fe 01       	movw	r30, r28
     e5c:	e3 57       	subi	r30, 0x73	; 115
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	29 e8       	ldi	r18, 0x89	; 137
     e6a:	38 e8       	ldi	r19, 0x88	; 136
     e6c:	48 e8       	ldi	r20, 0x88	; 136
     e6e:	5e e3       	ldi	r21, 0x3E	; 62
     e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	a2 83       	std	Z+2, r26	; 0x02
     e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e82:	fe 01       	movw	r30, r28
     e84:	e7 57       	subi	r30, 0x77	; 119
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	34 f4       	brge	.+12     	; 0xeac <LCD_init+0x21e>
		__ticks = 1;
     ea0:	fe 01       	movw	r30, r28
     ea2:	e8 57       	subi	r30, 0x78	; 120
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 83       	st	Z, r24
     eaa:	e0 c0       	rjmp	.+448    	; 0x106c <LCD_init+0x3de>
	else if (__tmp > 255)
     eac:	fe 01       	movw	r30, r28
     eae:	e7 57       	subi	r30, 0x77	; 119
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	53 e4       	ldi	r21, 0x43	; 67
     ec2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	0c f0       	brlt	.+2      	; 0xecc <LCD_init+0x23e>
     eca:	c0 c0       	rjmp	.+384    	; 0x104c <LCD_init+0x3be>
	{
		_delay_ms(__us / 1000.0);
     ecc:	fe 01       	movw	r30, r28
     ece:	e3 57       	subi	r30, 0x73	; 115
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a e7       	ldi	r20, 0x7A	; 122
     ee0:	54 e4       	ldi	r21, 0x44	; 68
     ee2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	fe 01       	movw	r30, r28
     eec:	ec 57       	subi	r30, 0x7C	; 124
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 83       	st	Z, r24
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	a2 83       	std	Z+2, r26	; 0x02
     ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	8e 01       	movw	r16, r28
     efa:	00 58       	subi	r16, 0x80	; 128
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	fe 01       	movw	r30, r28
     f00:	ec 57       	subi	r30, 0x7C	; 124
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	48 e4       	ldi	r20, 0x48	; 72
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	f8 01       	movw	r30, r16
     f1e:	80 83       	st	Z, r24
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	a2 83       	std	Z+2, r26	; 0x02
     f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f26:	fe 01       	movw	r30, r28
     f28:	e0 58       	subi	r30, 0x80	; 128
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	44 f4       	brge	.+16     	; 0xf54 <LCD_init+0x2c6>
		__ticks = 1;
     f44:	fe 01       	movw	r30, r28
     f46:	e2 58       	subi	r30, 0x82	; 130
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	64 c0       	rjmp	.+200    	; 0x101c <LCD_init+0x38e>
	else if (__tmp > 65535)
     f54:	fe 01       	movw	r30, r28
     f56:	e0 58       	subi	r30, 0x80	; 128
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3f ef       	ldi	r19, 0xFF	; 255
     f66:	4f e7       	ldi	r20, 0x7F	; 127
     f68:	57 e4       	ldi	r21, 0x47	; 71
     f6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f6e:	18 16       	cp	r1, r24
     f70:	0c f0       	brlt	.+2      	; 0xf74 <LCD_init+0x2e6>
     f72:	43 c0       	rjmp	.+134    	; 0xffa <LCD_init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f74:	fe 01       	movw	r30, r28
     f76:	ec 57       	subi	r30, 0x7C	; 124
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	8e 01       	movw	r16, r28
     f94:	02 58       	subi	r16, 0x82	; 130
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	f8 01       	movw	r30, r16
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
     faa:	1f c0       	rjmp	.+62     	; 0xfea <LCD_init+0x35c>
     fac:	fe 01       	movw	r30, r28
     fae:	e4 58       	subi	r30, 0x84	; 132
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	84 e1       	ldi	r24, 0x14	; 20
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	80 83       	st	Z, r24
     fba:	fe 01       	movw	r30, r28
     fbc:	e4 58       	subi	r30, 0x84	; 132
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <LCD_init+0x336>
     fc8:	fe 01       	movw	r30, r28
     fca:	e4 58       	subi	r30, 0x84	; 132
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	de 01       	movw	r26, r28
     fd4:	a2 58       	subi	r26, 0x82	; 130
     fd6:	bf 4f       	sbci	r27, 0xFF	; 255
     fd8:	fe 01       	movw	r30, r28
     fda:	e2 58       	subi	r30, 0x82	; 130
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	9c 93       	st	X, r25
     fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	fe 01       	movw	r30, r28
     fec:	e2 58       	subi	r30, 0x82	; 130
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	d1 f6       	brne	.-76     	; 0xfac <LCD_init+0x31e>
     ff8:	4b c0       	rjmp	.+150    	; 0x1090 <LCD_init+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	8e 01       	movw	r16, r28
     ffc:	02 58       	subi	r16, 0x82	; 130
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e0 58       	subi	r30, 0x80	; 128
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	f8 01       	movw	r30, r16
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
    101c:	de 01       	movw	r26, r28
    101e:	a6 58       	subi	r26, 0x86	; 134
    1020:	bf 4f       	sbci	r27, 0xFF	; 255
    1022:	fe 01       	movw	r30, r28
    1024:	e2 58       	subi	r30, 0x82	; 130
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	9c 93       	st	X, r25
    1030:	8e 93       	st	-X, r24
    1032:	fe 01       	movw	r30, r28
    1034:	e6 58       	subi	r30, 0x86	; 134
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <LCD_init+0x3ae>
    1040:	fe 01       	movw	r30, r28
    1042:	e6 58       	subi	r30, 0x86	; 134
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	22 c0       	rjmp	.+68     	; 0x1090 <LCD_init+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    104c:	8e 01       	movw	r16, r28
    104e:	08 57       	subi	r16, 0x78	; 120
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	fe 01       	movw	r30, r28
    1054:	e7 57       	subi	r30, 0x77	; 119
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	60 81       	ld	r22, Z
    105a:	71 81       	ldd	r23, Z+1	; 0x01
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	f8 01       	movw	r30, r16
    106a:	80 83       	st	Z, r24
    106c:	de 01       	movw	r26, r28
    106e:	a7 58       	subi	r26, 0x87	; 135
    1070:	bf 4f       	sbci	r27, 0xFF	; 255
    1072:	fe 01       	movw	r30, r28
    1074:	e8 57       	subi	r30, 0x78	; 120
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 81       	ld	r24, Z
    107a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    107c:	fe 01       	movw	r30, r28
    107e:	e7 58       	subi	r30, 0x87	; 135
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	8a 95       	dec	r24
    1086:	f1 f7       	brne	.-4      	; 0x1084 <LCD_init+0x3f6>
    1088:	fe 01       	movw	r30, r28
    108a:	e7 58       	subi	r30, 0x87	; 135
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x32);
    1090:	82 e3       	ldi	r24, 0x32	; 50
    1092:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    1096:	fe 01       	movw	r30, r28
    1098:	eb 58       	subi	r30, 0x8B	; 139
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a8 ec       	ldi	r26, 0xC8	; 200
    10a2:	b2 e4       	ldi	r27, 0x42	; 66
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	a2 83       	std	Z+2, r26	; 0x02
    10aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10ac:	8e 01       	movw	r16, r28
    10ae:	0f 58       	subi	r16, 0x8F	; 143
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	fe 01       	movw	r30, r28
    10b4:	eb 58       	subi	r30, 0x8B	; 139
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	29 e8       	ldi	r18, 0x89	; 137
    10c2:	38 e8       	ldi	r19, 0x88	; 136
    10c4:	48 e8       	ldi	r20, 0x88	; 136
    10c6:	5e e3       	ldi	r21, 0x3E	; 62
    10c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	80 83       	st	Z, r24
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	a2 83       	std	Z+2, r26	; 0x02
    10d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10da:	fe 01       	movw	r30, r28
    10dc:	ef 58       	subi	r30, 0x8F	; 143
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	34 f4       	brge	.+12     	; 0x1104 <LCD_init+0x476>
		__ticks = 1;
    10f8:	fe 01       	movw	r30, r28
    10fa:	e0 59       	subi	r30, 0x90	; 144
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 83       	st	Z, r24
    1102:	e0 c0       	rjmp	.+448    	; 0x12c4 <LCD_init+0x636>
	else if (__tmp > 255)
    1104:	fe 01       	movw	r30, r28
    1106:	ef 58       	subi	r30, 0x8F	; 143
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	53 e4       	ldi	r21, 0x43	; 67
    111a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	0c f0       	brlt	.+2      	; 0x1124 <LCD_init+0x496>
    1122:	c0 c0       	rjmp	.+384    	; 0x12a4 <LCD_init+0x616>
	{
		_delay_ms(__us / 1000.0);
    1124:	fe 01       	movw	r30, r28
    1126:	eb 58       	subi	r30, 0x8B	; 139
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a e7       	ldi	r20, 0x7A	; 122
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	fe 01       	movw	r30, r28
    1144:	e4 59       	subi	r30, 0x94	; 148
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 83       	st	Z, r24
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	a2 83       	std	Z+2, r26	; 0x02
    114e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	8e 01       	movw	r16, r28
    1152:	08 59       	subi	r16, 0x98	; 152
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	fe 01       	movw	r30, r28
    1158:	e4 59       	subi	r30, 0x94	; 148
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	48 e4       	ldi	r20, 0x48	; 72
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	f8 01       	movw	r30, r16
    1176:	80 83       	st	Z, r24
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	a2 83       	std	Z+2, r26	; 0x02
    117c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    117e:	fe 01       	movw	r30, r28
    1180:	e8 59       	subi	r30, 0x98	; 152
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5f e3       	ldi	r21, 0x3F	; 63
    1194:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1198:	88 23       	and	r24, r24
    119a:	44 f4       	brge	.+16     	; 0x11ac <LCD_init+0x51e>
		__ticks = 1;
    119c:	fe 01       	movw	r30, r28
    119e:	ea 59       	subi	r30, 0x9A	; 154
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	64 c0       	rjmp	.+200    	; 0x1274 <LCD_init+0x5e6>
	else if (__tmp > 65535)
    11ac:	fe 01       	movw	r30, r28
    11ae:	e8 59       	subi	r30, 0x98	; 152
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	0c f0       	brlt	.+2      	; 0x11cc <LCD_init+0x53e>
    11ca:	43 c0       	rjmp	.+134    	; 0x1252 <LCD_init+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	fe 01       	movw	r30, r28
    11ce:	e4 59       	subi	r30, 0x94	; 148
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	8e 01       	movw	r16, r28
    11ec:	0a 59       	subi	r16, 0x9A	; 154
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	f8 01       	movw	r30, r16
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	1f c0       	rjmp	.+62     	; 0x1242 <LCD_init+0x5b4>
    1204:	fe 01       	movw	r30, r28
    1206:	ec 59       	subi	r30, 0x9C	; 156
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	84 e1       	ldi	r24, 0x14	; 20
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1212:	fe 01       	movw	r30, r28
    1214:	ec 59       	subi	r30, 0x9C	; 156
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCD_init+0x58e>
    1220:	fe 01       	movw	r30, r28
    1222:	ec 59       	subi	r30, 0x9C	; 156
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122a:	de 01       	movw	r26, r28
    122c:	aa 59       	subi	r26, 0x9A	; 154
    122e:	bf 4f       	sbci	r27, 0xFF	; 255
    1230:	fe 01       	movw	r30, r28
    1232:	ea 59       	subi	r30, 0x9A	; 154
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 81       	ld	r24, Z
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	9c 93       	st	X, r25
    1240:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	fe 01       	movw	r30, r28
    1244:	ea 59       	subi	r30, 0x9A	; 154
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	d1 f6       	brne	.-76     	; 0x1204 <LCD_init+0x576>
    1250:	4b c0       	rjmp	.+150    	; 0x12e8 <LCD_init+0x65a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1252:	8e 01       	movw	r16, r28
    1254:	0a 59       	subi	r16, 0x9A	; 154
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	fe 01       	movw	r30, r28
    125a:	e8 59       	subi	r30, 0x98	; 152
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	f8 01       	movw	r30, r16
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	de 01       	movw	r26, r28
    1276:	ae 59       	subi	r26, 0x9E	; 158
    1278:	bf 4f       	sbci	r27, 0xFF	; 255
    127a:	fe 01       	movw	r30, r28
    127c:	ea 59       	subi	r30, 0x9A	; 154
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
    128a:	fe 01       	movw	r30, r28
    128c:	ee 59       	subi	r30, 0x9E	; 158
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCD_init+0x606>
    1298:	fe 01       	movw	r30, r28
    129a:	ee 59       	subi	r30, 0x9E	; 158
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	22 c0       	rjmp	.+68     	; 0x12e8 <LCD_init+0x65a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12a4:	8e 01       	movw	r16, r28
    12a6:	00 59       	subi	r16, 0x90	; 144
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	fe 01       	movw	r30, r28
    12ac:	ef 58       	subi	r30, 0x8F	; 143
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	60 81       	ld	r22, Z
    12b2:	71 81       	ldd	r23, Z+1	; 0x01
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 83       	st	Z, r24
    12c4:	de 01       	movw	r26, r28
    12c6:	af 59       	subi	r26, 0x9F	; 159
    12c8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ca:	fe 01       	movw	r30, r28
    12cc:	e0 59       	subi	r30, 0x90	; 144
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	80 81       	ld	r24, Z
    12d2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12d4:	fe 01       	movw	r30, r28
    12d6:	ef 59       	subi	r30, 0x9F	; 159
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 81       	ld	r24, Z
    12dc:	8a 95       	dec	r24
    12de:	f1 f7       	brne	.-4      	; 0x12dc <LCD_init+0x64e>
    12e0:	fe 01       	movw	r30, r28
    12e2:	ef 59       	subi	r30, 0x9F	; 159
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x28);
    12e8:	88 e2       	ldi	r24, 0x28	; 40
    12ea:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e3 5a       	subi	r30, 0xA3	; 163
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a8 ec       	ldi	r26, 0xC8	; 200
    12fa:	b2 e4       	ldi	r27, 0x42	; 66
    12fc:	80 83       	st	Z, r24
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	a2 83       	std	Z+2, r26	; 0x02
    1302:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1304:	8e 01       	movw	r16, r28
    1306:	07 5a       	subi	r16, 0xA7	; 167
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	fe 01       	movw	r30, r28
    130c:	e3 5a       	subi	r30, 0xA3	; 163
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	29 e8       	ldi	r18, 0x89	; 137
    131a:	38 e8       	ldi	r19, 0x88	; 136
    131c:	48 e8       	ldi	r20, 0x88	; 136
    131e:	5e e3       	ldi	r21, 0x3E	; 62
    1320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	f8 01       	movw	r30, r16
    132a:	80 83       	st	Z, r24
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	a2 83       	std	Z+2, r26	; 0x02
    1330:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1332:	fe 01       	movw	r30, r28
    1334:	e7 5a       	subi	r30, 0xA7	; 167
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	34 f4       	brge	.+12     	; 0x135c <LCD_init+0x6ce>
		__ticks = 1;
    1350:	fe 01       	movw	r30, r28
    1352:	e8 5a       	subi	r30, 0xA8	; 168
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
    135a:	e0 c0       	rjmp	.+448    	; 0x151c <LCD_init+0x88e>
	else if (__tmp > 255)
    135c:	fe 01       	movw	r30, r28
    135e:	e7 5a       	subi	r30, 0xA7	; 167
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	53 e4       	ldi	r21, 0x43	; 67
    1372:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1376:	18 16       	cp	r1, r24
    1378:	0c f0       	brlt	.+2      	; 0x137c <LCD_init+0x6ee>
    137a:	c0 c0       	rjmp	.+384    	; 0x14fc <LCD_init+0x86e>
	{
		_delay_ms(__us / 1000.0);
    137c:	fe 01       	movw	r30, r28
    137e:	e3 5a       	subi	r30, 0xA3	; 163
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a e7       	ldi	r20, 0x7A	; 122
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	fe 01       	movw	r30, r28
    139c:	ec 5a       	subi	r30, 0xAC	; 172
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 83       	st	Z, r24
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	a2 83       	std	Z+2, r26	; 0x02
    13a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	8e 01       	movw	r16, r28
    13aa:	00 5b       	subi	r16, 0xB0	; 176
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	ec 5a       	subi	r30, 0xAC	; 172
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	93 81       	ldd	r25, Z+3	; 0x03
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	48 e4       	ldi	r20, 0x48	; 72
    13c2:	53 e4       	ldi	r21, 0x43	; 67
    13c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	f8 01       	movw	r30, r16
    13ce:	80 83       	st	Z, r24
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	a2 83       	std	Z+2, r26	; 0x02
    13d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13d6:	fe 01       	movw	r30, r28
    13d8:	e0 5b       	subi	r30, 0xB0	; 176
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	44 f4       	brge	.+16     	; 0x1404 <LCD_init+0x776>
		__ticks = 1;
    13f4:	fe 01       	movw	r30, r28
    13f6:	e2 5b       	subi	r30, 0xB2	; 178
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
    1402:	64 c0       	rjmp	.+200    	; 0x14cc <LCD_init+0x83e>
	else if (__tmp > 65535)
    1404:	fe 01       	movw	r30, r28
    1406:	e0 5b       	subi	r30, 0xB0	; 176
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	0c f0       	brlt	.+2      	; 0x1424 <LCD_init+0x796>
    1422:	43 c0       	rjmp	.+134    	; 0x14aa <LCD_init+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	fe 01       	movw	r30, r28
    1426:	ec 5a       	subi	r30, 0xAC	; 172
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8e 01       	movw	r16, r28
    1444:	02 5b       	subi	r16, 0xB2	; 178
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	f8 01       	movw	r30, r16
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
    145a:	1f c0       	rjmp	.+62     	; 0x149a <LCD_init+0x80c>
    145c:	fe 01       	movw	r30, r28
    145e:	e4 5b       	subi	r30, 0xB4	; 180
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	84 e1       	ldi	r24, 0x14	; 20
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    146a:	fe 01       	movw	r30, r28
    146c:	e4 5b       	subi	r30, 0xB4	; 180
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <LCD_init+0x7e6>
    1478:	fe 01       	movw	r30, r28
    147a:	e4 5b       	subi	r30, 0xB4	; 180
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1482:	de 01       	movw	r26, r28
    1484:	a2 5b       	subi	r26, 0xB2	; 178
    1486:	bf 4f       	sbci	r27, 0xFF	; 255
    1488:	fe 01       	movw	r30, r28
    148a:	e2 5b       	subi	r30, 0xB2	; 178
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	11 96       	adiw	r26, 0x01	; 1
    1496:	9c 93       	st	X, r25
    1498:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149a:	fe 01       	movw	r30, r28
    149c:	e2 5b       	subi	r30, 0xB2	; 178
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	d1 f6       	brne	.-76     	; 0x145c <LCD_init+0x7ce>
    14a8:	4b c0       	rjmp	.+150    	; 0x1540 <LCD_init+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14aa:	8e 01       	movw	r16, r28
    14ac:	02 5b       	subi	r16, 0xB2	; 178
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	e0 5b       	subi	r30, 0xB0	; 176
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	de 01       	movw	r26, r28
    14ce:	a6 5b       	subi	r26, 0xB6	; 182
    14d0:	bf 4f       	sbci	r27, 0xFF	; 255
    14d2:	fe 01       	movw	r30, r28
    14d4:	e2 5b       	subi	r30, 0xB2	; 178
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	11 96       	adiw	r26, 0x01	; 1
    14de:	9c 93       	st	X, r25
    14e0:	8e 93       	st	-X, r24
    14e2:	fe 01       	movw	r30, r28
    14e4:	e6 5b       	subi	r30, 0xB6	; 182
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <LCD_init+0x85e>
    14f0:	fe 01       	movw	r30, r28
    14f2:	e6 5b       	subi	r30, 0xB6	; 182
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
    14fa:	22 c0       	rjmp	.+68     	; 0x1540 <LCD_init+0x8b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14fc:	8e 01       	movw	r16, r28
    14fe:	08 5a       	subi	r16, 0xA8	; 168
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	e7 5a       	subi	r30, 0xA7	; 167
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	f8 01       	movw	r30, r16
    151a:	80 83       	st	Z, r24
    151c:	de 01       	movw	r26, r28
    151e:	a7 5b       	subi	r26, 0xB7	; 183
    1520:	bf 4f       	sbci	r27, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	e8 5a       	subi	r30, 0xA8	; 168
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    152c:	fe 01       	movw	r30, r28
    152e:	e7 5b       	subi	r30, 0xB7	; 183
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	8a 95       	dec	r24
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_init+0x8a6>
    1538:	fe 01       	movw	r30, r28
    153a:	e7 5b       	subi	r30, 0xB7	; 183
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x0e);          //display on cursor on
    1540:	8e e0       	ldi	r24, 0x0E	; 14
    1542:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    1546:	fe 01       	movw	r30, r28
    1548:	eb 5b       	subi	r30, 0xBB	; 187
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a8 ec       	ldi	r26, 0xC8	; 200
    1552:	b2 e4       	ldi	r27, 0x42	; 66
    1554:	80 83       	st	Z, r24
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	a2 83       	std	Z+2, r26	; 0x02
    155a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    155c:	8e 01       	movw	r16, r28
    155e:	0f 5b       	subi	r16, 0xBF	; 191
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	fe 01       	movw	r30, r28
    1564:	eb 5b       	subi	r30, 0xBB	; 187
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	29 e8       	ldi	r18, 0x89	; 137
    1572:	38 e8       	ldi	r19, 0x88	; 136
    1574:	48 e8       	ldi	r20, 0x88	; 136
    1576:	5e e3       	ldi	r21, 0x3E	; 62
    1578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	f8 01       	movw	r30, r16
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158a:	fe 01       	movw	r30, r28
    158c:	ef 5b       	subi	r30, 0xBF	; 191
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <LCD_init+0x926>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	fe 01       	movw	r30, r28
    15ac:	e0 5c       	subi	r30, 0xC0	; 192
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 83       	st	Z, r24
    15b2:	9d c0       	rjmp	.+314    	; 0x16ee <LCD_init+0xa60>
	else if (__tmp > 255)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ef 5b       	subi	r30, 0xBF	; 191
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	53 e4       	ldi	r21, 0x43	; 67
    15ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <LCD_init+0x946>
    15d2:	7e c0       	rjmp	.+252    	; 0x16d0 <LCD_init+0xa42>
	{
		_delay_ms(__us / 1000.0);
    15d4:	fe 01       	movw	r30, r28
    15d6:	eb 5b       	subi	r30, 0xBB	; 187
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a e7       	ldi	r20, 0x7A	; 122
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8c af       	std	Y+60, r24	; 0x3c
    15f4:	9d af       	std	Y+61, r25	; 0x3d
    15f6:	ae af       	std	Y+62, r26	; 0x3e
    15f8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    15fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    15fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1600:	9f ad       	ldd	r25, Y+63	; 0x3f
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	48 e4       	ldi	r20, 0x48	; 72
    1608:	53 e4       	ldi	r21, 0x43	; 67
    160a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	88 af       	std	Y+56, r24	; 0x38
    1614:	99 af       	std	Y+57, r25	; 0x39
    1616:	aa af       	std	Y+58, r26	; 0x3a
    1618:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    161a:	68 ad       	ldd	r22, Y+56	; 0x38
    161c:	79 ad       	ldd	r23, Y+57	; 0x39
    161e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1620:	9b ad       	ldd	r25, Y+59	; 0x3b
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <LCD_init+0x9ae>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9f ab       	std	Y+55, r25	; 0x37
    1638:	8e ab       	std	Y+54, r24	; 0x36
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <LCD_init+0xa2c>
	else if (__tmp > 65535)
    163c:	68 ad       	ldd	r22, Y+56	; 0x38
    163e:	79 ad       	ldd	r23, Y+57	; 0x39
    1640:	8a ad       	ldd	r24, Y+58	; 0x3a
    1642:	9b ad       	ldd	r25, Y+59	; 0x3b
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <LCD_init+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	6c ad       	ldd	r22, Y+60	; 0x3c
    1656:	7d ad       	ldd	r23, Y+61	; 0x3d
    1658:	8e ad       	ldd	r24, Y+62	; 0x3e
    165a:	9f ad       	ldd	r25, Y+63	; 0x3f
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9f ab       	std	Y+55, r25	; 0x37
    167a:	8e ab       	std	Y+54, r24	; 0x36
    167c:	0f c0       	rjmp	.+30     	; 0x169c <LCD_init+0xa0e>
    167e:	84 e1       	ldi	r24, 0x14	; 20
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9d ab       	std	Y+53, r25	; 0x35
    1684:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1686:	8c a9       	ldd	r24, Y+52	; 0x34
    1688:	9d a9       	ldd	r25, Y+53	; 0x35
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_init+0x9fc>
    168e:	9d ab       	std	Y+53, r25	; 0x35
    1690:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8e a9       	ldd	r24, Y+54	; 0x36
    1694:	9f a9       	ldd	r25, Y+55	; 0x37
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9f ab       	std	Y+55, r25	; 0x37
    169a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8e a9       	ldd	r24, Y+54	; 0x36
    169e:	9f a9       	ldd	r25, Y+55	; 0x37
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <LCD_init+0x9f0>
    16a4:	2d c0       	rjmp	.+90     	; 0x1700 <LCD_init+0xa72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	68 ad       	ldd	r22, Y+56	; 0x38
    16a8:	79 ad       	ldd	r23, Y+57	; 0x39
    16aa:	8a ad       	ldd	r24, Y+58	; 0x3a
    16ac:	9b ad       	ldd	r25, Y+59	; 0x3b
    16ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9f ab       	std	Y+55, r25	; 0x37
    16b8:	8e ab       	std	Y+54, r24	; 0x36
    16ba:	8e a9       	ldd	r24, Y+54	; 0x36
    16bc:	9f a9       	ldd	r25, Y+55	; 0x37
    16be:	9b ab       	std	Y+51, r25	; 0x33
    16c0:	8a ab       	std	Y+50, r24	; 0x32
    16c2:	8a a9       	ldd	r24, Y+50	; 0x32
    16c4:	9b a9       	ldd	r25, Y+51	; 0x33
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_init+0xa38>
    16ca:	9b ab       	std	Y+51, r25	; 0x33
    16cc:	8a ab       	std	Y+50, r24	; 0x32
    16ce:	18 c0       	rjmp	.+48     	; 0x1700 <LCD_init+0xa72>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16d0:	fe 01       	movw	r30, r28
    16d2:	ef 5b       	subi	r30, 0xBF	; 191
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	fe 01       	movw	r30, r28
    16e8:	e0 5c       	subi	r30, 0xC0	; 192
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 83       	st	Z, r24
    16ee:	fe 01       	movw	r30, r28
    16f0:	e0 5c       	subi	r30, 0xC0	; 192
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16f8:	89 a9       	ldd	r24, Y+49	; 0x31
    16fa:	8a 95       	dec	r24
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_init+0xa6c>
    16fe:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	LCD_Send_CMD(0x01);                    //clear LCD
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	aa ef       	ldi	r26, 0xFA	; 250
    170c:	b4 e4       	ldi	r27, 0x44	; 68
    170e:	8d a7       	std	Y+45, r24	; 0x2d
    1710:	9e a7       	std	Y+46, r25	; 0x2e
    1712:	af a7       	std	Y+47, r26	; 0x2f
    1714:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1716:	6d a5       	ldd	r22, Y+45	; 0x2d
    1718:	7e a5       	ldd	r23, Y+46	; 0x2e
    171a:	8f a5       	ldd	r24, Y+47	; 0x2f
    171c:	98 a9       	ldd	r25, Y+48	; 0x30
    171e:	29 e8       	ldi	r18, 0x89	; 137
    1720:	38 e8       	ldi	r19, 0x88	; 136
    1722:	48 e8       	ldi	r20, 0x88	; 136
    1724:	5e e3       	ldi	r21, 0x3E	; 62
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	89 a7       	std	Y+41, r24	; 0x29
    1730:	9a a7       	std	Y+42, r25	; 0x2a
    1732:	ab a7       	std	Y+43, r26	; 0x2b
    1734:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1736:	69 a5       	ldd	r22, Y+41	; 0x29
    1738:	7a a5       	ldd	r23, Y+42	; 0x2a
    173a:	8b a5       	ldd	r24, Y+43	; 0x2b
    173c:	9c a5       	ldd	r25, Y+44	; 0x2c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	1c f4       	brge	.+6      	; 0x1754 <LCD_init+0xac6>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	88 a7       	std	Y+40, r24	; 0x28
    1752:	91 c0       	rjmp	.+290    	; 0x1876 <LCD_init+0xbe8>
	else if (__tmp > 255)
    1754:	69 a5       	ldd	r22, Y+41	; 0x29
    1756:	7a a5       	ldd	r23, Y+42	; 0x2a
    1758:	8b a5       	ldd	r24, Y+43	; 0x2b
    175a:	9c a5       	ldd	r25, Y+44	; 0x2c
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	53 e4       	ldi	r21, 0x43	; 67
    1764:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	0c f0       	brlt	.+2      	; 0x176e <LCD_init+0xae0>
    176c:	7b c0       	rjmp	.+246    	; 0x1864 <LCD_init+0xbd6>
	{
		_delay_ms(__us / 1000.0);
    176e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1770:	7e a5       	ldd	r23, Y+46	; 0x2e
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8c a3       	std	Y+36, r24	; 0x24
    1788:	9d a3       	std	Y+37, r25	; 0x25
    178a:	ae a3       	std	Y+38, r26	; 0x26
    178c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6c a1       	ldd	r22, Y+36	; 0x24
    1790:	7d a1       	ldd	r23, Y+37	; 0x25
    1792:	8e a1       	ldd	r24, Y+38	; 0x26
    1794:	9f a1       	ldd	r25, Y+39	; 0x27
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	48 e4       	ldi	r20, 0x48	; 72
    179c:	53 e4       	ldi	r21, 0x43	; 67
    179e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	88 a3       	std	Y+32, r24	; 0x20
    17a8:	99 a3       	std	Y+33, r25	; 0x21
    17aa:	aa a3       	std	Y+34, r26	; 0x22
    17ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    17ae:	68 a1       	ldd	r22, Y+32	; 0x20
    17b0:	79 a1       	ldd	r23, Y+33	; 0x21
    17b2:	8a a1       	ldd	r24, Y+34	; 0x22
    17b4:	9b a1       	ldd	r25, Y+35	; 0x23
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <LCD_init+0xb42>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9f 8f       	std	Y+31, r25	; 0x1f
    17cc:	8e 8f       	std	Y+30, r24	; 0x1e
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <LCD_init+0xbc0>
	else if (__tmp > 65535)
    17d0:	68 a1       	ldd	r22, Y+32	; 0x20
    17d2:	79 a1       	ldd	r23, Y+33	; 0x21
    17d4:	8a a1       	ldd	r24, Y+34	; 0x22
    17d6:	9b a1       	ldd	r25, Y+35	; 0x23
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <LCD_init+0xbac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6c a1       	ldd	r22, Y+36	; 0x24
    17ea:	7d a1       	ldd	r23, Y+37	; 0x25
    17ec:	8e a1       	ldd	r24, Y+38	; 0x26
    17ee:	9f a1       	ldd	r25, Y+39	; 0x27
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9f 8f       	std	Y+31, r25	; 0x1f
    180e:	8e 8f       	std	Y+30, r24	; 0x1e
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_init+0xba2>
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9d 8f       	std	Y+29, r25	; 0x1d
    1818:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    181c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_init+0xb90>
    1822:	9d 8f       	std	Y+29, r25	; 0x1d
    1824:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1828:	9f 8d       	ldd	r25, Y+31	; 0x1f
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9f 8f       	std	Y+31, r25	; 0x1f
    182e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1832:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <LCD_init+0xb84>
    1838:	24 c0       	rjmp	.+72     	; 0x1882 <LCD_init+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	68 a1       	ldd	r22, Y+32	; 0x20
    183c:	79 a1       	ldd	r23, Y+33	; 0x21
    183e:	8a a1       	ldd	r24, Y+34	; 0x22
    1840:	9b a1       	ldd	r25, Y+35	; 0x23
    1842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9f 8f       	std	Y+31, r25	; 0x1f
    184c:	8e 8f       	std	Y+30, r24	; 0x1e
    184e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1850:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1852:	9b 8f       	std	Y+27, r25	; 0x1b
    1854:	8a 8f       	std	Y+26, r24	; 0x1a
    1856:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1858:	9b 8d       	ldd	r25, Y+27	; 0x1b
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_init+0xbcc>
    185e:	9b 8f       	std	Y+27, r25	; 0x1b
    1860:	8a 8f       	std	Y+26, r24	; 0x1a
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <LCD_init+0xbf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1864:	69 a5       	ldd	r22, Y+41	; 0x29
    1866:	7a a5       	ldd	r23, Y+42	; 0x2a
    1868:	8b a5       	ldd	r24, Y+43	; 0x2b
    186a:	9c a5       	ldd	r25, Y+44	; 0x2c
    186c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	88 a7       	std	Y+40, r24	; 0x28
    1876:	88 a5       	ldd	r24, Y+40	; 0x28
    1878:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    187a:	89 8d       	ldd	r24, Y+25	; 0x19
    187c:	8a 95       	dec	r24
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_init+0xbee>
    1880:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2000);
	LCD_Send_CMD(0x06);                    // shift cursor right
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a8 ec       	ldi	r26, 0xC8	; 200
    188e:	b2 e4       	ldi	r27, 0x42	; 66
    1890:	8d 8b       	std	Y+21, r24	; 0x15
    1892:	9e 8b       	std	Y+22, r25	; 0x16
    1894:	af 8b       	std	Y+23, r26	; 0x17
    1896:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	29 e8       	ldi	r18, 0x89	; 137
    18a2:	38 e8       	ldi	r19, 0x88	; 136
    18a4:	48 e8       	ldi	r20, 0x88	; 136
    18a6:	5e e3       	ldi	r21, 0x3E	; 62
    18a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	89 8b       	std	Y+17, r24	; 0x11
    18b2:	9a 8b       	std	Y+18, r25	; 0x12
    18b4:	ab 8b       	std	Y+19, r26	; 0x13
    18b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18b8:	69 89       	ldd	r22, Y+17	; 0x11
    18ba:	7a 89       	ldd	r23, Y+18	; 0x12
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	1c f4       	brge	.+6      	; 0x18d6 <LCD_init+0xc48>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	88 8b       	std	Y+16, r24	; 0x10
    18d4:	91 c0       	rjmp	.+290    	; 0x19f8 <LCD_init+0xd6a>
	else if (__tmp > 255)
    18d6:	69 89       	ldd	r22, Y+17	; 0x11
    18d8:	7a 89       	ldd	r23, Y+18	; 0x12
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	53 e4       	ldi	r21, 0x43	; 67
    18e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	0c f0       	brlt	.+2      	; 0x18f0 <LCD_init+0xc62>
    18ee:	7b c0       	rjmp	.+246    	; 0x19e6 <LCD_init+0xd58>
	{
		_delay_ms(__us / 1000.0);
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	54 e4       	ldi	r21, 0x44	; 68
    1900:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8c 87       	std	Y+12, r24	; 0x0c
    190a:	9d 87       	std	Y+13, r25	; 0x0d
    190c:	ae 87       	std	Y+14, r26	; 0x0e
    190e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6c 85       	ldd	r22, Y+12	; 0x0c
    1912:	7d 85       	ldd	r23, Y+13	; 0x0d
    1914:	8e 85       	ldd	r24, Y+14	; 0x0e
    1916:	9f 85       	ldd	r25, Y+15	; 0x0f
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	48 e4       	ldi	r20, 0x48	; 72
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	88 87       	std	Y+8, r24	; 0x08
    192a:	99 87       	std	Y+9, r25	; 0x09
    192c:	aa 87       	std	Y+10, r26	; 0x0a
    192e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1930:	68 85       	ldd	r22, Y+8	; 0x08
    1932:	79 85       	ldd	r23, Y+9	; 0x09
    1934:	8a 85       	ldd	r24, Y+10	; 0x0a
    1936:	9b 85       	ldd	r25, Y+11	; 0x0b
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_init+0xcc4>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9f 83       	std	Y+7, r25	; 0x07
    194e:	8e 83       	std	Y+6, r24	; 0x06
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_init+0xd42>
	else if (__tmp > 65535)
    1952:	68 85       	ldd	r22, Y+8	; 0x08
    1954:	79 85       	ldd	r23, Y+9	; 0x09
    1956:	8a 85       	ldd	r24, Y+10	; 0x0a
    1958:	9b 85       	ldd	r25, Y+11	; 0x0b
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6c 85       	ldd	r22, Y+12	; 0x0c
    196c:	7d 85       	ldd	r23, Y+13	; 0x0d
    196e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1970:	9f 85       	ldd	r25, Y+15	; 0x0f
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9f 83       	std	Y+7, r25	; 0x07
    1990:	8e 83       	std	Y+6, r24	; 0x06
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_init+0xd24>
    1994:	84 e1       	ldi	r24, 0x14	; 20
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9d 83       	std	Y+5, r25	; 0x05
    199a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	9d 81       	ldd	r25, Y+5	; 0x05
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_init+0xd12>
    19a4:	9d 83       	std	Y+5, r25	; 0x05
    19a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	9f 81       	ldd	r25, Y+7	; 0x07
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9f 83       	std	Y+7, r25	; 0x07
    19b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8e 81       	ldd	r24, Y+6	; 0x06
    19b4:	9f 81       	ldd	r25, Y+7	; 0x07
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_init+0xd06>
    19ba:	24 c0       	rjmp	.+72     	; 0x1a04 <LCD_init+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	68 85       	ldd	r22, Y+8	; 0x08
    19be:	79 85       	ldd	r23, Y+9	; 0x09
    19c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9f 83       	std	Y+7, r25	; 0x07
    19ce:	8e 83       	std	Y+6, r24	; 0x06
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	9b 83       	std	Y+3, r25	; 0x03
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_init+0xd4e>
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <LCD_init+0xd76>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19e6:	69 89       	ldd	r22, Y+17	; 0x11
    19e8:	7a 89       	ldd	r23, Y+18	; 0x12
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	88 8b       	std	Y+16, r24	; 0x10
    19f8:	88 89       	ldd	r24, Y+16	; 0x10
    19fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	8a 95       	dec	r24
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_init+0xd70>
    1a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);


}
    1a04:	c2 56       	subi	r28, 0x62	; 98
    1a06:	df 4f       	sbci	r29, 0xFF	; 255
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	08 95       	ret

00001a1c <LCD_Send_CMD>:


void LCD_Send_CMD(unsigned char cmd)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	ef 97       	sbiw	r28, 0x3f	; 63
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	8f af       	std	Y+63, r24	; 0x3f
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd&0xF0);
    1a32:	a8 e3       	ldi	r26, 0x38	; 56
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	9f 70       	andi	r25, 0x0F	; 15
    1a40:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a42:	80 7f       	andi	r24, 0xF0	; 240
    1a44:	89 2b       	or	r24, r25
    1a46:	8c 93       	st	X, r24

	LCD_Control_PORT &=~(1<<LCD_RS);
    1a48:	a5 e3       	ldi	r26, 0x35	; 53
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7b       	andi	r24, 0xBF	; 191
    1a54:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_EN);
    1a56:	a5 e3       	ldi	r26, 0x35	; 53
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e3       	ldi	r30, 0x35	; 53
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	8c 93       	st	X, r24
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	8b af       	std	Y+59, r24	; 0x3b
    1a6e:	9c af       	std	Y+60, r25	; 0x3c
    1a70:	ad af       	std	Y+61, r26	; 0x3d
    1a72:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a74:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a76:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a7c:	29 e8       	ldi	r18, 0x89	; 137
    1a7e:	38 e8       	ldi	r19, 0x88	; 136
    1a80:	48 e8       	ldi	r20, 0x88	; 136
    1a82:	5e e3       	ldi	r21, 0x3E	; 62
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8f ab       	std	Y+55, r24	; 0x37
    1a8e:	98 af       	std	Y+56, r25	; 0x38
    1a90:	a9 af       	std	Y+57, r26	; 0x39
    1a92:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a94:	6f a9       	ldd	r22, Y+55	; 0x37
    1a96:	78 ad       	ldd	r23, Y+56	; 0x38
    1a98:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	1c f4       	brge	.+6      	; 0x1ab2 <LCD_Send_CMD+0x96>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	8e ab       	std	Y+54, r24	; 0x36
    1ab0:	91 c0       	rjmp	.+290    	; 0x1bd4 <LCD_Send_CMD+0x1b8>
	else if (__tmp > 255)
    1ab2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ab4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	53 e4       	ldi	r21, 0x43	; 67
    1ac2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	0c f0       	brlt	.+2      	; 0x1acc <LCD_Send_CMD+0xb0>
    1aca:	7b c0       	rjmp	.+246    	; 0x1bc2 <LCD_Send_CMD+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1acc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ace:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ad0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ad2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a e7       	ldi	r20, 0x7A	; 122
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8a ab       	std	Y+50, r24	; 0x32
    1ae6:	9b ab       	std	Y+51, r25	; 0x33
    1ae8:	ac ab       	std	Y+52, r26	; 0x34
    1aea:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	6a a9       	ldd	r22, Y+50	; 0x32
    1aee:	7b a9       	ldd	r23, Y+51	; 0x33
    1af0:	8c a9       	ldd	r24, Y+52	; 0x34
    1af2:	9d a9       	ldd	r25, Y+53	; 0x35
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	48 e4       	ldi	r20, 0x48	; 72
    1afa:	53 e4       	ldi	r21, 0x43	; 67
    1afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8e a7       	std	Y+46, r24	; 0x2e
    1b06:	9f a7       	std	Y+47, r25	; 0x2f
    1b08:	a8 ab       	std	Y+48, r26	; 0x30
    1b0a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b0c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b0e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b10:	88 a9       	ldd	r24, Y+48	; 0x30
    1b12:	99 a9       	ldd	r25, Y+49	; 0x31
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <LCD_Send_CMD+0x112>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9d a7       	std	Y+45, r25	; 0x2d
    1b2a:	8c a7       	std	Y+44, r24	; 0x2c
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <LCD_Send_CMD+0x190>
	else if (__tmp > 65535)
    1b2e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b30:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b32:	88 a9       	ldd	r24, Y+48	; 0x30
    1b34:	99 a9       	ldd	r25, Y+49	; 0x31
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <LCD_Send_CMD+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	6a a9       	ldd	r22, Y+50	; 0x32
    1b48:	7b a9       	ldd	r23, Y+51	; 0x33
    1b4a:	8c a9       	ldd	r24, Y+52	; 0x34
    1b4c:	9d a9       	ldd	r25, Y+53	; 0x35
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9d a7       	std	Y+45, r25	; 0x2d
    1b6c:	8c a7       	std	Y+44, r24	; 0x2c
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <LCD_Send_CMD+0x172>
    1b70:	84 e1       	ldi	r24, 0x14	; 20
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9b a7       	std	Y+43, r25	; 0x2b
    1b76:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b78:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b7a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_Send_CMD+0x160>
    1b80:	9b a7       	std	Y+43, r25	; 0x2b
    1b82:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b86:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9d a7       	std	Y+45, r25	; 0x2d
    1b8c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b90:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <LCD_Send_CMD+0x154>
    1b96:	24 c0       	rjmp	.+72     	; 0x1be0 <LCD_Send_CMD+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b9a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b9c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b9e:	99 a9       	ldd	r25, Y+49	; 0x31
    1ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9d a7       	std	Y+45, r25	; 0x2d
    1baa:	8c a7       	std	Y+44, r24	; 0x2c
    1bac:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bae:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bb0:	99 a7       	std	Y+41, r25	; 0x29
    1bb2:	88 a7       	std	Y+40, r24	; 0x28
    1bb4:	88 a5       	ldd	r24, Y+40	; 0x28
    1bb6:	99 a5       	ldd	r25, Y+41	; 0x29
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_Send_CMD+0x19c>
    1bbc:	99 a7       	std	Y+41, r25	; 0x29
    1bbe:	88 a7       	std	Y+40, r24	; 0x28
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_Send_CMD+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bc2:	6f a9       	ldd	r22, Y+55	; 0x37
    1bc4:	78 ad       	ldd	r23, Y+56	; 0x38
    1bc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8e ab       	std	Y+54, r24	; 0x36
    1bd4:	8e a9       	ldd	r24, Y+54	; 0x36
    1bd6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd8:	8f a1       	ldd	r24, Y+39	; 0x27
    1bda:	8a 95       	dec	r24
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_Send_CMD+0x1be>
    1bde:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    1be0:	a5 e3       	ldi	r26, 0x35	; 53
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e3       	ldi	r30, 0x35	; 53
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	8c 93       	st	X, r24
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	8b a3       	std	Y+35, r24	; 0x23
    1bf8:	9c a3       	std	Y+36, r25	; 0x24
    1bfa:	ad a3       	std	Y+37, r26	; 0x25
    1bfc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1c00:	7c a1       	ldd	r23, Y+36	; 0x24
    1c02:	8d a1       	ldd	r24, Y+37	; 0x25
    1c04:	9e a1       	ldd	r25, Y+38	; 0x26
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	48 e4       	ldi	r20, 0x48	; 72
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 8f       	std	Y+31, r24	; 0x1f
    1c18:	98 a3       	std	Y+32, r25	; 0x20
    1c1a:	a9 a3       	std	Y+33, r26	; 0x21
    1c1c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c20:	78 a1       	ldd	r23, Y+32	; 0x20
    1c22:	89 a1       	ldd	r24, Y+33	; 0x21
    1c24:	9a a1       	ldd	r25, Y+34	; 0x22
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <LCD_Send_CMD+0x224>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <LCD_Send_CMD+0x2a2>
	else if (__tmp > 65535)
    1c40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c42:	78 a1       	ldd	r23, Y+32	; 0x20
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <LCD_Send_CMD+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_Send_CMD+0x284>
    1c82:	84 e1       	ldi	r24, 0x14	; 20
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8f       	std	Y+28, r25	; 0x1c
    1c88:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_Send_CMD+0x272>
    1c92:	9c 8f       	std	Y+28, r25	; 0x1c
    1c94:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <LCD_Send_CMD+0x266>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <LCD_Send_CMD+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cac:	78 a1       	ldd	r23, Y+32	; 0x20
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 8f       	std	Y+30, r25	; 0x1e
    1cbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc4:	89 8f       	std	Y+25, r24	; 0x19
    1cc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1cc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_Send_CMD+0x2ae>
    1cce:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd0:	89 8f       	std	Y+25, r24	; 0x19


	_delay_ms(1);


	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd<<4);
    1cd2:	a8 e3       	ldi	r26, 0x38	; 56
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e8 e3       	ldi	r30, 0x38	; 56
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	28 2f       	mov	r18, r24
    1cde:	2f 70       	andi	r18, 0x0F	; 15
    1ce0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	82 95       	swap	r24
    1ce8:	92 95       	swap	r25
    1cea:	90 7f       	andi	r25, 0xF0	; 240
    1cec:	98 27       	eor	r25, r24
    1cee:	80 7f       	andi	r24, 0xF0	; 240
    1cf0:	98 27       	eor	r25, r24
    1cf2:	82 2b       	or	r24, r18
    1cf4:	8c 93       	st	X, r24
	LCD_Control_PORT |=(1<<LCD_EN);
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 68       	ori	r24, 0x80	; 128
    1d02:	8c 93       	st	X, r24
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e8       	ldi	r26, 0x80	; 128
    1d0a:	bf e3       	ldi	r27, 0x3F	; 63
    1d0c:	8d 8b       	std	Y+21, r24	; 0x15
    1d0e:	9e 8b       	std	Y+22, r25	; 0x16
    1d10:	af 8b       	std	Y+23, r26	; 0x17
    1d12:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	29 e8       	ldi	r18, 0x89	; 137
    1d1e:	38 e8       	ldi	r19, 0x88	; 136
    1d20:	48 e8       	ldi	r20, 0x88	; 136
    1d22:	5e e3       	ldi	r21, 0x3E	; 62
    1d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	89 8b       	std	Y+17, r24	; 0x11
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	ab 8b       	std	Y+19, r26	; 0x13
    1d32:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d34:	69 89       	ldd	r22, Y+17	; 0x11
    1d36:	7a 89       	ldd	r23, Y+18	; 0x12
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	1c f4       	brge	.+6      	; 0x1d52 <LCD_Send_CMD+0x336>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	88 8b       	std	Y+16, r24	; 0x10
    1d50:	91 c0       	rjmp	.+290    	; 0x1e74 <LCD_Send_CMD+0x458>
	else if (__tmp > 255)
    1d52:	69 89       	ldd	r22, Y+17	; 0x11
    1d54:	7a 89       	ldd	r23, Y+18	; 0x12
    1d56:	8b 89       	ldd	r24, Y+19	; 0x13
    1d58:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <LCD_Send_CMD+0x350>
    1d6a:	7b c0       	rjmp	.+246    	; 0x1e62 <LCD_Send_CMD+0x446>
	{
		_delay_ms(__us / 1000.0);
    1d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8c 87       	std	Y+12, r24	; 0x0c
    1d86:	9d 87       	std	Y+13, r25	; 0x0d
    1d88:	ae 87       	std	Y+14, r26	; 0x0e
    1d8a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d90:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d92:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	48 e4       	ldi	r20, 0x48	; 72
    1d9a:	53 e4       	ldi	r21, 0x43	; 67
    1d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	88 87       	std	Y+8, r24	; 0x08
    1da6:	99 87       	std	Y+9, r25	; 0x09
    1da8:	aa 87       	std	Y+10, r26	; 0x0a
    1daa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dac:	68 85       	ldd	r22, Y+8	; 0x08
    1dae:	79 85       	ldd	r23, Y+9	; 0x09
    1db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <LCD_Send_CMD+0x3b2>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9f 83       	std	Y+7, r25	; 0x07
    1dca:	8e 83       	std	Y+6, r24	; 0x06
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <LCD_Send_CMD+0x430>
	else if (__tmp > 65535)
    1dce:	68 85       	ldd	r22, Y+8	; 0x08
    1dd0:	79 85       	ldd	r23, Y+9	; 0x09
    1dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <LCD_Send_CMD+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1de8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dec:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9f 83       	std	Y+7, r25	; 0x07
    1e0c:	8e 83       	std	Y+6, r24	; 0x06
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <LCD_Send_CMD+0x412>
    1e10:	84 e1       	ldi	r24, 0x14	; 20
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9d 83       	std	Y+5, r25	; 0x05
    1e16:	8c 83       	std	Y+4, r24	; 0x04
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_Send_CMD+0x400>
    1e20:	9d 83       	std	Y+5, r25	; 0x05
    1e22:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9f 83       	std	Y+7, r25	; 0x07
    1e2c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	9f 81       	ldd	r25, Y+7	; 0x07
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <LCD_Send_CMD+0x3f4>
    1e36:	24 c0       	rjmp	.+72     	; 0x1e80 <LCD_Send_CMD+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	68 85       	ldd	r22, Y+8	; 0x08
    1e3a:	79 85       	ldd	r23, Y+9	; 0x09
    1e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9f 83       	std	Y+7, r25	; 0x07
    1e4a:	8e 83       	std	Y+6, r24	; 0x06
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e50:	9b 83       	std	Y+3, r25	; 0x03
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_Send_CMD+0x43c>
    1e5c:	9b 83       	std	Y+3, r25	; 0x03
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_Send_CMD+0x464>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e62:	69 89       	ldd	r22, Y+17	; 0x11
    1e64:	7a 89       	ldd	r23, Y+18	; 0x12
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	88 8b       	std	Y+16, r24	; 0x10
    1e74:	88 89       	ldd	r24, Y+16	; 0x10
    1e76:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	8a 95       	dec	r24
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_Send_CMD+0x45e>
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    1e80:	a5 e3       	ldi	r26, 0x35	; 53
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 77       	andi	r24, 0x7F	; 127
    1e8c:	8c 93       	st	X, r24


}
    1e8e:	ef 96       	adiw	r28, 0x3f	; 63
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_Send_data>:


void LCD_Send_data(unsigned char data)
{
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	cd 54       	subi	r28, 0x4D	; 77
    1eae:	d0 40       	sbci	r29, 0x00	; 0
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e3 5b       	subi	r30, 0xB3	; 179
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 83       	st	Z, r24

	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);
    1ec2:	a8 e3       	ldi	r26, 0x38	; 56
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e8 e3       	ldi	r30, 0x38	; 56
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	98 2f       	mov	r25, r24
    1ece:	9f 70       	andi	r25, 0x0F	; 15
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e3 5b       	subi	r30, 0xB3	; 179
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 7f       	andi	r24, 0xF0	; 240
    1eda:	89 2b       	or	r24, r25
    1edc:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_RS);
    1ede:	a5 e3       	ldi	r26, 0x35	; 53
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e3       	ldi	r30, 0x35	; 53
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 64       	ori	r24, 0x40	; 64
    1eea:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_EN);
    1eec:	a5 e3       	ldi	r26, 0x35	; 53
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 68       	ori	r24, 0x80	; 128
    1ef8:	8c 93       	st	X, r24
    1efa:	fe 01       	movw	r30, r28
    1efc:	e7 5b       	subi	r30, 0xB7	; 183
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f10:	8e 01       	movw	r16, r28
    1f12:	0b 5b       	subi	r16, 0xBB	; 187
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 5b       	subi	r30, 0xB7	; 183
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	29 e8       	ldi	r18, 0x89	; 137
    1f26:	38 e8       	ldi	r19, 0x88	; 136
    1f28:	48 e8       	ldi	r20, 0x88	; 136
    1f2a:	5e e3       	ldi	r21, 0x3E	; 62
    1f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3e:	fe 01       	movw	r30, r28
    1f40:	eb 5b       	subi	r30, 0xBB	; 187
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	34 f4       	brge	.+12     	; 0x1f68 <LCD_Send_data+0xc8>
		__ticks = 1;
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ec 5b       	subi	r30, 0xBC	; 188
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	80 83       	st	Z, r24
    1f66:	a7 c0       	rjmp	.+334    	; 0x20b6 <LCD_Send_data+0x216>
	else if (__tmp > 255)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	eb 5b       	subi	r30, 0xBB	; 187
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	53 e4       	ldi	r21, 0x43	; 67
    1f7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <LCD_Send_data+0xe8>
    1f86:	87 c0       	rjmp	.+270    	; 0x2096 <LCD_Send_data+0x1f6>
	{
		_delay_ms(__us / 1000.0);
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e7 5b       	subi	r30, 0xB7	; 183
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	54 e4       	ldi	r21, 0x44	; 68
    1f9e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e0 5c       	subi	r30, 0xC0	; 192
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e0 5c       	subi	r30, 0xC0	; 192
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	48 e4       	ldi	r20, 0x48	; 72
    1fc8:	53 e4       	ldi	r21, 0x43	; 67
    1fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8c af       	std	Y+60, r24	; 0x3c
    1fd4:	9d af       	std	Y+61, r25	; 0x3d
    1fd6:	ae af       	std	Y+62, r26	; 0x3e
    1fd8:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1fda:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fdc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fde:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fe0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_Send_data+0x15c>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9b af       	std	Y+59, r25	; 0x3b
    1ff8:	8a af       	std	Y+58, r24	; 0x3a
    1ffa:	42 c0       	rjmp	.+132    	; 0x2080 <LCD_Send_data+0x1e0>
	else if (__tmp > 65535)
    1ffc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ffe:	7d ad       	ldd	r23, Y+61	; 0x3d
    2000:	8e ad       	ldd	r24, Y+62	; 0x3e
    2002:	9f ad       	ldd	r25, Y+63	; 0x3f
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	64 f5       	brge	.+88     	; 0x206c <LCD_Send_data+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	fe 01       	movw	r30, r28
    2016:	e0 5c       	subi	r30, 0xC0	; 192
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9b af       	std	Y+59, r25	; 0x3b
    2040:	8a af       	std	Y+58, r24	; 0x3a
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <LCD_Send_data+0x1c2>
    2044:	84 e1       	ldi	r24, 0x14	; 20
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	99 af       	std	Y+57, r25	; 0x39
    204a:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    204c:	88 ad       	ldd	r24, Y+56	; 0x38
    204e:	99 ad       	ldd	r25, Y+57	; 0x39
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_Send_data+0x1b0>
    2054:	99 af       	std	Y+57, r25	; 0x39
    2056:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8a ad       	ldd	r24, Y+58	; 0x3a
    205a:	9b ad       	ldd	r25, Y+59	; 0x3b
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9b af       	std	Y+59, r25	; 0x3b
    2060:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8a ad       	ldd	r24, Y+58	; 0x3a
    2064:	9b ad       	ldd	r25, Y+59	; 0x3b
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_Send_data+0x1a4>
    206a:	2e c0       	rjmp	.+92     	; 0x20c8 <LCD_Send_data+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6c ad       	ldd	r22, Y+60	; 0x3c
    206e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2070:	8e ad       	ldd	r24, Y+62	; 0x3e
    2072:	9f ad       	ldd	r25, Y+63	; 0x3f
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9b af       	std	Y+59, r25	; 0x3b
    207e:	8a af       	std	Y+58, r24	; 0x3a
    2080:	8a ad       	ldd	r24, Y+58	; 0x3a
    2082:	9b ad       	ldd	r25, Y+59	; 0x3b
    2084:	9f ab       	std	Y+55, r25	; 0x37
    2086:	8e ab       	std	Y+54, r24	; 0x36
    2088:	8e a9       	ldd	r24, Y+54	; 0x36
    208a:	9f a9       	ldd	r25, Y+55	; 0x37
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_Send_data+0x1ec>
    2090:	9f ab       	std	Y+55, r25	; 0x37
    2092:	8e ab       	std	Y+54, r24	; 0x36
    2094:	19 c0       	rjmp	.+50     	; 0x20c8 <LCD_Send_data+0x228>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2096:	8e 01       	movw	r16, r28
    2098:	0c 5b       	subi	r16, 0xBC	; 188
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	fe 01       	movw	r30, r28
    209e:	eb 5b       	subi	r30, 0xBB	; 187
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	80 83       	st	Z, r24
    20b6:	fe 01       	movw	r30, r28
    20b8:	ec 5b       	subi	r30, 0xBC	; 188
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c0:	8d a9       	ldd	r24, Y+53	; 0x35
    20c2:	8a 95       	dec	r24
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_Send_data+0x222>
    20c6:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    20c8:	a5 e3       	ldi	r26, 0x35	; 53
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 77       	andi	r24, 0x7F	; 127
    20d4:	8c 93       	st	X, r24
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e8       	ldi	r26, 0x80	; 128
    20dc:	bf e3       	ldi	r27, 0x3F	; 63
    20de:	89 ab       	std	Y+49, r24	; 0x31
    20e0:	9a ab       	std	Y+50, r25	; 0x32
    20e2:	ab ab       	std	Y+51, r26	; 0x33
    20e4:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	69 a9       	ldd	r22, Y+49	; 0x31
    20e8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ea:	8b a9       	ldd	r24, Y+51	; 0x33
    20ec:	9c a9       	ldd	r25, Y+52	; 0x34
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	48 e4       	ldi	r20, 0x48	; 72
    20f4:	53 e4       	ldi	r21, 0x43	; 67
    20f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8d a7       	std	Y+45, r24	; 0x2d
    2100:	9e a7       	std	Y+46, r25	; 0x2e
    2102:	af a7       	std	Y+47, r26	; 0x2f
    2104:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2106:	6d a5       	ldd	r22, Y+45	; 0x2d
    2108:	7e a5       	ldd	r23, Y+46	; 0x2e
    210a:	8f a5       	ldd	r24, Y+47	; 0x2f
    210c:	98 a9       	ldd	r25, Y+48	; 0x30
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_Send_data+0x288>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9c a7       	std	Y+44, r25	; 0x2c
    2124:	8b a7       	std	Y+43, r24	; 0x2b
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <LCD_Send_data+0x306>
	else if (__tmp > 65535)
    2128:	6d a5       	ldd	r22, Y+45	; 0x2d
    212a:	7e a5       	ldd	r23, Y+46	; 0x2e
    212c:	8f a5       	ldd	r24, Y+47	; 0x2f
    212e:	98 a9       	ldd	r25, Y+48	; 0x30
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <LCD_Send_data+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	69 a9       	ldd	r22, Y+49	; 0x31
    2142:	7a a9       	ldd	r23, Y+50	; 0x32
    2144:	8b a9       	ldd	r24, Y+51	; 0x33
    2146:	9c a9       	ldd	r25, Y+52	; 0x34
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9c a7       	std	Y+44, r25	; 0x2c
    2166:	8b a7       	std	Y+43, r24	; 0x2b
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_Send_data+0x2e8>
    216a:	84 e1       	ldi	r24, 0x14	; 20
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9a a7       	std	Y+42, r25	; 0x2a
    2170:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2172:	89 a5       	ldd	r24, Y+41	; 0x29
    2174:	9a a5       	ldd	r25, Y+42	; 0x2a
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_Send_data+0x2d6>
    217a:	9a a7       	std	Y+42, r25	; 0x2a
    217c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2180:	9c a5       	ldd	r25, Y+44	; 0x2c
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9c a7       	std	Y+44, r25	; 0x2c
    2186:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8b a5       	ldd	r24, Y+43	; 0x2b
    218a:	9c a5       	ldd	r25, Y+44	; 0x2c
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_Send_data+0x2ca>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <LCD_Send_data+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6d a5       	ldd	r22, Y+45	; 0x2d
    2194:	7e a5       	ldd	r23, Y+46	; 0x2e
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9c a7       	std	Y+44, r25	; 0x2c
    21a4:	8b a7       	std	Y+43, r24	; 0x2b
    21a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21aa:	98 a7       	std	Y+40, r25	; 0x28
    21ac:	8f a3       	std	Y+39, r24	; 0x27
    21ae:	8f a1       	ldd	r24, Y+39	; 0x27
    21b0:	98 a5       	ldd	r25, Y+40	; 0x28
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_Send_data+0x312>
    21b6:	98 a7       	std	Y+40, r25	; 0x28
    21b8:	8f a3       	std	Y+39, r24	; 0x27


	_delay_ms(1);


	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data<<4);
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	28 2f       	mov	r18, r24
    21c6:	2f 70       	andi	r18, 0x0F	; 15
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 5b       	subi	r30, 0xB3	; 179
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	82 95       	swap	r24
    21d6:	92 95       	swap	r25
    21d8:	90 7f       	andi	r25, 0xF0	; 240
    21da:	98 27       	eor	r25, r24
    21dc:	80 7f       	andi	r24, 0xF0	; 240
    21de:	98 27       	eor	r25, r24
    21e0:	82 2b       	or	r24, r18
    21e2:	8c 93       	st	X, r24
	LCD_Control_PORT |=(1<<LCD_EN);
    21e4:	a5 e3       	ldi	r26, 0x35	; 53
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e5 e3       	ldi	r30, 0x35	; 53
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e8       	ldi	r26, 0x80	; 128
    21f8:	bf e3       	ldi	r27, 0x3F	; 63
    21fa:	8b a3       	std	Y+35, r24	; 0x23
    21fc:	9c a3       	std	Y+36, r25	; 0x24
    21fe:	ad a3       	std	Y+37, r26	; 0x25
    2200:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2202:	6b a1       	ldd	r22, Y+35	; 0x23
    2204:	7c a1       	ldd	r23, Y+36	; 0x24
    2206:	8d a1       	ldd	r24, Y+37	; 0x25
    2208:	9e a1       	ldd	r25, Y+38	; 0x26
    220a:	29 e8       	ldi	r18, 0x89	; 137
    220c:	38 e8       	ldi	r19, 0x88	; 136
    220e:	48 e8       	ldi	r20, 0x88	; 136
    2210:	5e e3       	ldi	r21, 0x3E	; 62
    2212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8f 8f       	std	Y+31, r24	; 0x1f
    221c:	98 a3       	std	Y+32, r25	; 0x20
    221e:	a9 a3       	std	Y+33, r26	; 0x21
    2220:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2222:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2224:	78 a1       	ldd	r23, Y+32	; 0x20
    2226:	89 a1       	ldd	r24, Y+33	; 0x21
    2228:	9a a1       	ldd	r25, Y+34	; 0x22
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	1c f4       	brge	.+6      	; 0x2240 <LCD_Send_data+0x3a0>
		__ticks = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	8e 8f       	std	Y+30, r24	; 0x1e
    223e:	91 c0       	rjmp	.+290    	; 0x2362 <LCD_Send_data+0x4c2>
	else if (__tmp > 255)
    2240:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2242:	78 a1       	ldd	r23, Y+32	; 0x20
    2244:	89 a1       	ldd	r24, Y+33	; 0x21
    2246:	9a a1       	ldd	r25, Y+34	; 0x22
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	0c f0       	brlt	.+2      	; 0x225a <LCD_Send_data+0x3ba>
    2258:	7b c0       	rjmp	.+246    	; 0x2350 <LCD_Send_data+0x4b0>
	{
		_delay_ms(__us / 1000.0);
    225a:	6b a1       	ldd	r22, Y+35	; 0x23
    225c:	7c a1       	ldd	r23, Y+36	; 0x24
    225e:	8d a1       	ldd	r24, Y+37	; 0x25
    2260:	9e a1       	ldd	r25, Y+38	; 0x26
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	54 e4       	ldi	r21, 0x44	; 68
    226a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8a 8f       	std	Y+26, r24	; 0x1a
    2274:	9b 8f       	std	Y+27, r25	; 0x1b
    2276:	ac 8f       	std	Y+28, r26	; 0x1c
    2278:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    227c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    227e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2280:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	48 e4       	ldi	r20, 0x48	; 72
    2288:	53 e4       	ldi	r21, 0x43	; 67
    228a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8e 8b       	std	Y+22, r24	; 0x16
    2294:	9f 8b       	std	Y+23, r25	; 0x17
    2296:	a8 8f       	std	Y+24, r26	; 0x18
    2298:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    229a:	6e 89       	ldd	r22, Y+22	; 0x16
    229c:	7f 89       	ldd	r23, Y+23	; 0x17
    229e:	88 8d       	ldd	r24, Y+24	; 0x18
    22a0:	99 8d       	ldd	r25, Y+25	; 0x19
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_Send_data+0x41c>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9d 8b       	std	Y+21, r25	; 0x15
    22b8:	8c 8b       	std	Y+20, r24	; 0x14
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_Send_data+0x49a>
	else if (__tmp > 65535)
    22bc:	6e 89       	ldd	r22, Y+22	; 0x16
    22be:	7f 89       	ldd	r23, Y+23	; 0x17
    22c0:	88 8d       	ldd	r24, Y+24	; 0x18
    22c2:	99 8d       	ldd	r25, Y+25	; 0x19
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_Send_data+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22d6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9d 8b       	std	Y+21, r25	; 0x15
    22fa:	8c 8b       	std	Y+20, r24	; 0x14
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_Send_data+0x47c>
    22fe:	84 e1       	ldi	r24, 0x14	; 20
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9b 8b       	std	Y+19, r25	; 0x13
    2304:	8a 8b       	std	Y+18, r24	; 0x12
    2306:	8a 89       	ldd	r24, Y+18	; 0x12
    2308:	9b 89       	ldd	r25, Y+19	; 0x13
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_Send_data+0x46a>
    230e:	9b 8b       	std	Y+19, r25	; 0x13
    2310:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	8c 89       	ldd	r24, Y+20	; 0x14
    2314:	9d 89       	ldd	r25, Y+21	; 0x15
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9d 8b       	std	Y+21, r25	; 0x15
    231a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	8c 89       	ldd	r24, Y+20	; 0x14
    231e:	9d 89       	ldd	r25, Y+21	; 0x15
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_Send_data+0x45e>
    2324:	24 c0       	rjmp	.+72     	; 0x236e <LCD_Send_data+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6e 89       	ldd	r22, Y+22	; 0x16
    2328:	7f 89       	ldd	r23, Y+23	; 0x17
    232a:	88 8d       	ldd	r24, Y+24	; 0x18
    232c:	99 8d       	ldd	r25, Y+25	; 0x19
    232e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9d 8b       	std	Y+21, r25	; 0x15
    2338:	8c 8b       	std	Y+20, r24	; 0x14
    233a:	8c 89       	ldd	r24, Y+20	; 0x14
    233c:	9d 89       	ldd	r25, Y+21	; 0x15
    233e:	99 8b       	std	Y+17, r25	; 0x11
    2340:	88 8b       	std	Y+16, r24	; 0x10
    2342:	88 89       	ldd	r24, Y+16	; 0x10
    2344:	99 89       	ldd	r25, Y+17	; 0x11
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_Send_data+0x4a6>
    234a:	99 8b       	std	Y+17, r25	; 0x11
    234c:	88 8b       	std	Y+16, r24	; 0x10
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_Send_data+0x4ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2350:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2352:	78 a1       	ldd	r23, Y+32	; 0x20
    2354:	89 a1       	ldd	r24, Y+33	; 0x21
    2356:	9a a1       	ldd	r25, Y+34	; 0x22
    2358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8e 8f       	std	Y+30, r24	; 0x1e
    2362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2364:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2366:	8f 85       	ldd	r24, Y+15	; 0x0f
    2368:	8a 95       	dec	r24
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_Send_data+0x4c8>
    236c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    236e:	a5 e3       	ldi	r26, 0x35	; 53
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e3       	ldi	r30, 0x35	; 53
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8f 77       	andi	r24, 0x7F	; 127
    237a:	8c 93       	st	X, r24
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a0 e8       	ldi	r26, 0x80	; 128
    2382:	bf e3       	ldi	r27, 0x3F	; 63
    2384:	8b 87       	std	Y+11, r24	; 0x0b
    2386:	9c 87       	std	Y+12, r25	; 0x0c
    2388:	ad 87       	std	Y+13, r26	; 0x0d
    238a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	48 e4       	ldi	r20, 0x48	; 72
    239a:	53 e4       	ldi	r21, 0x43	; 67
    239c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8f 83       	std	Y+7, r24	; 0x07
    23a6:	98 87       	std	Y+8, r25	; 0x08
    23a8:	a9 87       	std	Y+9, r26	; 0x09
    23aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	2c f4       	brge	.+10     	; 0x23ce <LCD_Send_data+0x52e>
		__ticks = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	3f c0       	rjmp	.+126    	; 0x244c <LCD_Send_data+0x5ac>
	else if (__tmp > 65535)
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	4c f5       	brge	.+82     	; 0x2438 <LCD_Send_data+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	0f c0       	rjmp	.+30     	; 0x242e <LCD_Send_data+0x58e>
    2410:	84 e1       	ldi	r24, 0x14	; 20
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_Send_data+0x57c>
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f7       	brne	.-38     	; 0x2410 <LCD_Send_data+0x570>
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <LCD_Send_data+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_Send_data+0x5b8>
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2460:	c3 5b       	subi	r28, 0xB3	; 179
    2462:	df 4f       	sbci	r29, 0xFF	; 255
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	1f 91       	pop	r17
    2474:	0f 91       	pop	r16
    2476:	08 95       	ret

00002478 <LCD_Send_string>:


void LCD_Send_string(unsigned char* str)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <LCD_Send_string+0x6>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	0b c0       	rjmp	.+22     	; 0x249e <LCD_Send_string+0x26>

	while(*str!='\0')
	{
		LCD_Send_data(*str++);
    2488:	e9 81       	ldd	r30, Y+1	; 0x01
    248a:	fa 81       	ldd	r31, Y+2	; 0x02
    248c:	20 81       	ld	r18, Z
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	82 2f       	mov	r24, r18
    249a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_Send_data>


void LCD_Send_string(unsigned char* str)
{

	while(*str!='\0')
    249e:	e9 81       	ldd	r30, Y+1	; 0x01
    24a0:	fa 81       	ldd	r31, Y+2	; 0x02
    24a2:	80 81       	ld	r24, Z
    24a4:	88 23       	and	r24, r24
    24a6:	81 f7       	brne	.-32     	; 0x2488 <LCD_Send_string+0x10>
		LCD_Send_data(*str++);

	}


}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_go_to>:

void LCD_go_to(unsigned char y,unsigned char x)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	60 97       	sbiw	r28, 0x10	; 16
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	8f 87       	std	Y+15, r24	; 0x0f
    24c8:	68 8b       	std	Y+16, r22	; 0x10

	if(y==1)
    24ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	29 f4       	brne	.+10     	; 0x24da <LCD_go_to+0x28>
	{
		LCD_Send_CMD(0x80+x-1);
    24d0:	88 89       	ldd	r24, Y+16	; 0x10
    24d2:	81 58       	subi	r24, 0x81	; 129
    24d4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    24d8:	07 c0       	rjmp	.+14     	; 0x24e8 <LCD_go_to+0x36>
	}
	else if(y==2)
    24da:	8f 85       	ldd	r24, Y+15	; 0x0f
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	21 f4       	brne	.+8      	; 0x24e8 <LCD_go_to+0x36>
	{
		LCD_Send_CMD(0xC0+x-1);
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	81 54       	subi	r24, 0x41	; 65
    24e4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 e8       	ldi	r26, 0x80	; 128
    24ee:	bf e3       	ldi	r27, 0x3F	; 63
    24f0:	8b 87       	std	Y+11, r24	; 0x0b
    24f2:	9c 87       	std	Y+12, r25	; 0x0c
    24f4:	ad 87       	std	Y+13, r26	; 0x0d
    24f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	48 e4       	ldi	r20, 0x48	; 72
    2506:	53 e4       	ldi	r21, 0x43	; 67
    2508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8f 83       	std	Y+7, r24	; 0x07
    2512:	98 87       	std	Y+8, r25	; 0x08
    2514:	a9 87       	std	Y+9, r26	; 0x09
    2516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <LCD_go_to+0x88>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <LCD_go_to+0x106>
	else if (__tmp > 65535)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <LCD_go_to+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	0f c0       	rjmp	.+30     	; 0x259a <LCD_go_to+0xe8>
    257c:	84 e1       	ldi	r24, 0x14	; 20
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD_go_to+0xd6>
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <LCD_go_to+0xca>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <LCD_go_to+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_go_to+0x112>
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1);
}
    25cc:	60 96       	adiw	r28, 0x10	; 16
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <clear_lcd>:
void clear_lcd ()
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	68 97       	sbiw	r28, 0x18	; 24
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
     	LCD_Send_CMD(0x01);                    //clear LCD
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <LCD_Send_CMD>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	aa ef       	ldi	r26, 0xFA	; 250
    25fe:	b4 e4       	ldi	r27, 0x44	; 68
    2600:	8d 8b       	std	Y+21, r24	; 0x15
    2602:	9e 8b       	std	Y+22, r25	; 0x16
    2604:	af 8b       	std	Y+23, r26	; 0x17
    2606:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2608:	6d 89       	ldd	r22, Y+21	; 0x15
    260a:	7e 89       	ldd	r23, Y+22	; 0x16
    260c:	8f 89       	ldd	r24, Y+23	; 0x17
    260e:	98 8d       	ldd	r25, Y+24	; 0x18
    2610:	29 e8       	ldi	r18, 0x89	; 137
    2612:	38 e8       	ldi	r19, 0x88	; 136
    2614:	48 e8       	ldi	r20, 0x88	; 136
    2616:	5e e3       	ldi	r21, 0x3E	; 62
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	89 8b       	std	Y+17, r24	; 0x11
    2622:	9a 8b       	std	Y+18, r25	; 0x12
    2624:	ab 8b       	std	Y+19, r26	; 0x13
    2626:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2628:	69 89       	ldd	r22, Y+17	; 0x11
    262a:	7a 89       	ldd	r23, Y+18	; 0x12
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	1c f4       	brge	.+6      	; 0x2646 <clear_lcd+0x68>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	88 8b       	std	Y+16, r24	; 0x10
    2644:	91 c0       	rjmp	.+290    	; 0x2768 <clear_lcd+0x18a>
	else if (__tmp > 255)
    2646:	69 89       	ldd	r22, Y+17	; 0x11
    2648:	7a 89       	ldd	r23, Y+18	; 0x12
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	53 e4       	ldi	r21, 0x43	; 67
    2656:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	0c f0       	brlt	.+2      	; 0x2660 <clear_lcd+0x82>
    265e:	7b c0       	rjmp	.+246    	; 0x2756 <clear_lcd+0x178>
	{
		_delay_ms(__us / 1000.0);
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8c 87       	std	Y+12, r24	; 0x0c
    267a:	9d 87       	std	Y+13, r25	; 0x0d
    267c:	ae 87       	std	Y+14, r26	; 0x0e
    267e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6c 85       	ldd	r22, Y+12	; 0x0c
    2682:	7d 85       	ldd	r23, Y+13	; 0x0d
    2684:	8e 85       	ldd	r24, Y+14	; 0x0e
    2686:	9f 85       	ldd	r25, Y+15	; 0x0f
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	48 e4       	ldi	r20, 0x48	; 72
    268e:	53 e4       	ldi	r21, 0x43	; 67
    2690:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	88 87       	std	Y+8, r24	; 0x08
    269a:	99 87       	std	Y+9, r25	; 0x09
    269c:	aa 87       	std	Y+10, r26	; 0x0a
    269e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26a0:	68 85       	ldd	r22, Y+8	; 0x08
    26a2:	79 85       	ldd	r23, Y+9	; 0x09
    26a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <clear_lcd+0xe4>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9f 83       	std	Y+7, r25	; 0x07
    26be:	8e 83       	std	Y+6, r24	; 0x06
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <clear_lcd+0x162>
	else if (__tmp > 65535)
    26c2:	68 85       	ldd	r22, Y+8	; 0x08
    26c4:	79 85       	ldd	r23, Y+9	; 0x09
    26c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <clear_lcd+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6c 85       	ldd	r22, Y+12	; 0x0c
    26dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    26de:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9f 83       	std	Y+7, r25	; 0x07
    2700:	8e 83       	std	Y+6, r24	; 0x06
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <clear_lcd+0x144>
    2704:	84 e1       	ldi	r24, 0x14	; 20
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9d 83       	std	Y+5, r25	; 0x05
    270a:	8c 83       	std	Y+4, r24	; 0x04
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <clear_lcd+0x132>
    2714:	9d 83       	std	Y+5, r25	; 0x05
    2716:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	8e 81       	ldd	r24, Y+6	; 0x06
    271a:	9f 81       	ldd	r25, Y+7	; 0x07
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9f 83       	std	Y+7, r25	; 0x07
    2720:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	8e 81       	ldd	r24, Y+6	; 0x06
    2724:	9f 81       	ldd	r25, Y+7	; 0x07
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <clear_lcd+0x126>
    272a:	24 c0       	rjmp	.+72     	; 0x2774 <clear_lcd+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	68 85       	ldd	r22, Y+8	; 0x08
    272e:	79 85       	ldd	r23, Y+9	; 0x09
    2730:	8a 85       	ldd	r24, Y+10	; 0x0a
    2732:	9b 85       	ldd	r25, Y+11	; 0x0b
    2734:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9f 83       	std	Y+7, r25	; 0x07
    273e:	8e 83       	std	Y+6, r24	; 0x06
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9f 81       	ldd	r25, Y+7	; 0x07
    2744:	9b 83       	std	Y+3, r25	; 0x03
    2746:	8a 83       	std	Y+2, r24	; 0x02
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <clear_lcd+0x16e>
    2750:	9b 83       	std	Y+3, r25	; 0x03
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <clear_lcd+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2756:	69 89       	ldd	r22, Y+17	; 0x11
    2758:	7a 89       	ldd	r23, Y+18	; 0x12
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	88 8b       	std	Y+16, r24	; 0x10
    2768:	88 89       	ldd	r24, Y+16	; 0x10
    276a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	8a 95       	dec	r24
    2770:	f1 f7       	brne	.-4      	; 0x276e <clear_lcd+0x190>
    2772:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
}
    2774:	68 96       	adiw	r28, 0x18	; 24
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <main>:
 */
#include<avr/io.h>
#include<util/delay.h>

int main()
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	2e 97       	sbiw	r28, 0x0e	; 14
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
	LCD_init();
    279a:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_init>
	init_uart();
    279e:	0e 94 4a 14 	call	0x2894	; 0x2894 <init_uart>
	 UART_SEND_string("ALI MOHAMED ELSIAD ");
    27a2:	80 e6       	ldi	r24, 0x60	; 96
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <UART_SEND_string>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	aa e7       	ldi	r26, 0x7A	; 122
    27b0:	b4 e4       	ldi	r27, 0x44	; 68
    27b2:	8b 87       	std	Y+11, r24	; 0x0b
    27b4:	9c 87       	std	Y+12, r25	; 0x0c
    27b6:	ad 87       	std	Y+13, r26	; 0x0d
    27b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	48 e4       	ldi	r20, 0x48	; 72
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8f 83       	std	Y+7, r24	; 0x07
    27d4:	98 87       	std	Y+8, r25	; 0x08
    27d6:	a9 87       	std	Y+9, r26	; 0x09
    27d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <main+0x76>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <main+0xf4>
	else if (__tmp > 65535)
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	0f c0       	rjmp	.+30     	; 0x285c <main+0xd6>
    283e:	84 e1       	ldi	r24, 0x14	; 20
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0xc4>
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <main+0xb8>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x100>
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01

	 _delay_ms(1000);
	 receive_the_letter();
    288e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <receive_the_letter>
    2892:	83 cf       	rjmp	.-250    	; 0x279a <main+0x14>

00002894 <init_uart>:
#include<util/delay.h>
#include"uart.h"


void init_uart()
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <init_uart+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	unsigned int rate=0;
    289e:	1a 82       	std	Y+2, r1	; 0x02
    28a0:	19 82       	std	Y+1, r1	; 0x01
	    UCSRB = (1 << RXEN) | (1 << TXEN);
    28a2:	ea e2       	ldi	r30, 0x2A	; 42
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	88 e1       	ldi	r24, 0x18	; 24
    28a8:	80 83       	st	Z, r24
		UCSRC = (1 << URSEL) | (3 << UCSZ0);
    28aa:	e0 e4       	ldi	r30, 0x40	; 64
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	86 e8       	ldi	r24, 0x86	; 134
    28b0:	80 83       	st	Z, r24
		rate= FOSC/16/BAUD-1;
    28b2:	83 e3       	ldi	r24, 0x33	; 51
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
		UBRRL=rate;
    28ba:	e9 e2       	ldi	r30, 0x29	; 41
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	80 83       	st	Z, r24
		UBRRH=(rate<<8);
    28c2:	e0 e4       	ldi	r30, 0x40	; 64
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	10 82       	st	Z, r1


}
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <ready_to_send>:
void ready_to_send()
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	2e 97       	sbiw	r28, 0x0e	; 14
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
	while (!( UCSRA & (1<<UDRE))) ;
    28e6:	eb e2       	ldi	r30, 0x2B	; 43
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	80 72       	andi	r24, 0x20	; 32
    28f2:	90 70       	andi	r25, 0x00	; 0
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	b9 f3       	breq	.-18     	; 0x28e6 <ready_to_send+0x14>
	LCD_go_to(1,1);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_go_to>
	LCD_Send_string(" uart is ready ");
    2904:	84 e7       	ldi	r24, 0x74	; 116
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_Send_string>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e8       	ldi	r25, 0x80	; 128
    2910:	ab e3       	ldi	r26, 0x3B	; 59
    2912:	b5 e4       	ldi	r27, 0x45	; 69
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	48 e4       	ldi	r20, 0x48	; 72
    292a:	53 e4       	ldi	r21, 0x43	; 67
    292c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <ready_to_send+0x8c>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <ready_to_send+0x10a>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <ready_to_send+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <ready_to_send+0xec>
    29a0:	84 e1       	ldi	r24, 0x14	; 20
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <ready_to_send+0xda>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <ready_to_send+0xce>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <ready_to_send+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <ready_to_send+0x116>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	clear_lcd ();
    29f0:	0e 94 ef 12 	call	0x25de	; 0x25de <clear_lcd>


}
    29f4:	2e 96       	adiw	r28, 0x0e	; 14
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <readt_to_receive>:
void readt_to_receive()
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
	while (!(UCSRA & (1<<RXC)));
    2a1a:	eb e2       	ldi	r30, 0x2B	; 43
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	88 23       	and	r24, r24
    2a22:	dc f7       	brge	.-10     	; 0x2a1a <readt_to_receive+0x14>
	LCD_go_to(1,1);
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_go_to>
	LCD_Send_string(" Receiving complete ! ");
    2a30:	84 e8       	ldi	r24, 0x84	; 132
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_Send_string>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e8       	ldi	r25, 0x80	; 128
    2a3c:	ab e3       	ldi	r26, 0x3B	; 59
    2a3e:	b5 e4       	ldi	r27, 0x45	; 69
    2a40:	8b 87       	std	Y+11, r24	; 0x0b
    2a42:	9c 87       	std	Y+12, r25	; 0x0c
    2a44:	ad 87       	std	Y+13, r26	; 0x0d
    2a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	48 e4       	ldi	r20, 0x48	; 72
    2a56:	53 e4       	ldi	r21, 0x43	; 67
    2a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8f 83       	std	Y+7, r24	; 0x07
    2a62:	98 87       	std	Y+8, r25	; 0x08
    2a64:	a9 87       	std	Y+9, r26	; 0x09
    2a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <readt_to_receive+0x84>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <readt_to_receive+0x102>
	else if (__tmp > 65535)
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <readt_to_receive+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <readt_to_receive+0xe4>
    2acc:	84 e1       	ldi	r24, 0x14	; 20
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <readt_to_receive+0xd2>
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <readt_to_receive+0xc6>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <readt_to_receive+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <readt_to_receive+0x10e>
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
		clear_lcd ();
    2b1c:	0e 94 ef 12 	call	0x25de	; 0x25de <clear_lcd>

}
    2b20:	2e 96       	adiw	r28, 0x0e	; 14
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <send_one_letter>:
void send_one_letter(unsigned char letter)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	 ready_to_send();
    2b3e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <ready_to_send>
	 UDR=letter;
    2b42:	ec e2       	ldi	r30, 0x2C	; 44
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	80 83       	st	Z, r24

}
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <receive_the_letter>:
char receive_the_letter()
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
	readt_to_receive();
    2b5a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <readt_to_receive>
	return UDR ;
    2b5e:	ec e2       	ldi	r30, 0x2C	; 44
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <UART_SEND_string>:
void UART_SEND_string(char *array)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <UART_SEND_string+0x6>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	0b c0       	rjmp	.+22     	; 0x2b90 <UART_SEND_string+0x26>

	while(*array !='\0')
	{

		send_one_letter(*array++);
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	20 81       	ld	r18, Z
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	82 2f       	mov	r24, r18
    2b8c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <send_one_letter>
	return UDR ;
}
void UART_SEND_string(char *array)
{

	while(*array !='\0')
    2b90:	e9 81       	ldd	r30, Y+1	; 0x01
    2b92:	fa 81       	ldd	r31, Y+2	; 0x02
    2b94:	80 81       	ld	r24, Z
    2b96:	88 23       	and	r24, r24
    2b98:	81 f7       	brne	.-32     	; 0x2b7a <UART_SEND_string+0x10>

		send_one_letter(*array++);

	}

}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <__prologue_saves__>:
    2ba4:	2f 92       	push	r2
    2ba6:	3f 92       	push	r3
    2ba8:	4f 92       	push	r4
    2baa:	5f 92       	push	r5
    2bac:	6f 92       	push	r6
    2bae:	7f 92       	push	r7
    2bb0:	8f 92       	push	r8
    2bb2:	9f 92       	push	r9
    2bb4:	af 92       	push	r10
    2bb6:	bf 92       	push	r11
    2bb8:	cf 92       	push	r12
    2bba:	df 92       	push	r13
    2bbc:	ef 92       	push	r14
    2bbe:	ff 92       	push	r15
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	ca 1b       	sub	r28, r26
    2bce:	db 0b       	sbc	r29, r27
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	09 94       	ijmp

00002bdc <__epilogue_restores__>:
    2bdc:	2a 88       	ldd	r2, Y+18	; 0x12
    2bde:	39 88       	ldd	r3, Y+17	; 0x11
    2be0:	48 88       	ldd	r4, Y+16	; 0x10
    2be2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2be4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2be6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2be8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bee:	b9 84       	ldd	r11, Y+9	; 0x09
    2bf0:	c8 84       	ldd	r12, Y+8	; 0x08
    2bf2:	df 80       	ldd	r13, Y+7	; 0x07
    2bf4:	ee 80       	ldd	r14, Y+6	; 0x06
    2bf6:	fd 80       	ldd	r15, Y+5	; 0x05
    2bf8:	0c 81       	ldd	r16, Y+4	; 0x04
    2bfa:	1b 81       	ldd	r17, Y+3	; 0x03
    2bfc:	aa 81       	ldd	r26, Y+2	; 0x02
    2bfe:	b9 81       	ldd	r27, Y+1	; 0x01
    2c00:	ce 0f       	add	r28, r30
    2c02:	d1 1d       	adc	r29, r1
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	ed 01       	movw	r28, r26
    2c10:	08 95       	ret

00002c12 <_exit>:
    2c12:	f8 94       	cli

00002c14 <__stop_program>:
    2c14:	ff cf       	rjmp	.-2      	; 0x2c14 <__stop_program>
